{"ast":null,"code":"import { BASE_PATH } from './config';\nexport function crearPromocion(promocion) {\n  const url = new URL(`${BASE_PATH}api/promociones/registrar`);\n  return fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(promocion)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.text(); // Obtener el texto de la respuesta\n  }).then(responseText => {\n    if (responseText) {\n      // Solo intentar parsear si hay contenido en la respuesta\n      return JSON.parse(responseText);\n    }\n    return {}; // Devolver un objeto vacío si no hay contenido\n  }).then(data => {\n    console.log('Promocion creada:', data);\n    return data;\n  }).catch(error => {\n    console.error('Error al crear la promocion:', error);\n  });\n}\nexport function listarPromociones() {\n  const url = new URL(`${BASE_PATH}api/promociones/listar`);\n  return fetch(url, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.text();\n  }).then(responseText => {\n    if (responseText) {\n      const data = JSON.parse(responseText);\n      return data.map(promo => ({\n        ...promo,\n        fechaInicio: new Date(promo.fechaInicio).toISOString().split('T')[0],\n        fechaFin: new Date(promo.fechaFin).toISOString().split('T')[0]\n      }));\n    }\n    return [];\n  }).then(data => {\n    console.log('Promociones listadas:', data);\n    return data;\n  }).catch(error => {\n    console.error('Error al listar las promociones:', error);\n  });\n}\nexport function obtenerPromocion(idPromocion) {\n  const url = new URL(`${BASE_PATH}api/promociones/detalle/${idPromocion}`);\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.text();\n  }).then(responseText => {\n    if (responseText) {\n      const promo = JSON.parse(responseText);\n      return {\n        ...promo,\n        fechaInicio: new Date(promo.fechaInicio).toISOString().split('T')[0],\n        fechaFin: new Date(promo.fechaFin).toISOString().split('T')[0]\n      };\n    }\n    return null;\n  }).then(data => {\n    console.log('Promoción obtenida:', data);\n    return data;\n  }).catch(error => {\n    console.error('Error al obtener la promoción:', error);\n  });\n}\nexport function obtenerProductosPromocion(idPromocion) {\n  const url = new URL(`${BASE_PATH}api/productoPromocion/${idPromocion}`);\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.text();\n  }).then(responseText => {\n    if (responseText) {\n      const productos = JSON.parse(responseText);\n      return productos.map(productoPromocion => ({\n        ...productoPromocion,\n        promocion: {\n          ...productoPromocion.promocion,\n          fechaInicio: new Date(productoPromocion.promocion.fechaInicio).toISOString().split('T')[0],\n          fechaFin: new Date(productoPromocion.promocion.fechaFin).toISOString().split('T')[0]\n        }\n      }));\n    }\n    return [];\n  }).then(data => {\n    console.log('Productos de la promoción obtenidos:', data);\n    return data;\n  }).catch(error => {\n    console.error('Error al obtener los productos de la promoción:', error);\n  });\n}\nexport function actualizarEstadoPromocion(idPromocion) {\n  const url = new URL(`${BASE_PATH}api/promociones/${idPromocion}/actualizarEstado`);\n  return fetch(url, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.text();\n  }).then(responseText => {\n    if (responseText) {\n      console.log('Estado de la promoción actualizado:', responseText);\n    }\n    return responseText;\n  }).catch(error => {\n    console.error('Error al actualizar el estado de la promoción:', error);\n  });\n}","map":{"version":3,"names":["BASE_PATH","crearPromocion","promocion","url","URL","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","status","text","responseText","parse","data","console","log","catch","error","listarPromociones","map","promo","fechaInicio","Date","toISOString","split","fechaFin","obtenerPromocion","idPromocion","obtenerProductosPromocion","productos","productoPromocion","actualizarEstadoPromocion"],"sources":["C:/Users/chris/Documents/Proyecto/mi-aplicacion/src/api/promocion.js"],"sourcesContent":["import{BASE_PATH} from './config';\r\n\r\nexport function crearPromocion(promocion) {\r\n    const url = new URL(`${BASE_PATH}api/promociones/registrar`);\r\n    \r\n    return fetch(url, { \r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(promocion)\r\n    })\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.text(); // Obtener el texto de la respuesta\r\n    })\r\n    .then(responseText => {\r\n        if (responseText) {\r\n            // Solo intentar parsear si hay contenido en la respuesta\r\n            return JSON.parse(responseText);\r\n        }\r\n        return {}; // Devolver un objeto vacío si no hay contenido\r\n    })\r\n    .then(data => {\r\n        console.log('Promocion creada:', data);\r\n        return data;\r\n    })\r\n    .catch(error => {\r\n        console.error('Error al crear la promocion:', error);\r\n    });\r\n}\r\n\r\nexport function listarPromociones() {\r\n    const url = new URL(`${BASE_PATH}api/promociones/listar`);\r\n    \r\n    return fetch(url, { \r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.text(); \r\n    })\r\n    .then(responseText => {\r\n        if (responseText) {\r\n            const data = JSON.parse(responseText);\r\n            return data.map(promo => ({\r\n                ...promo,\r\n                fechaInicio: new Date(promo.fechaInicio).toISOString().split('T')[0],\r\n                fechaFin: new Date(promo.fechaFin).toISOString().split('T')[0]\r\n            }));\r\n        }\r\n        return []; \r\n    })\r\n    .then(data => {\r\n        console.log('Promociones listadas:', data);\r\n        return data;\r\n    })\r\n    .catch(error => {\r\n        console.error('Error al listar las promociones:', error);\r\n    });\r\n}\r\n\r\nexport function obtenerPromocion(idPromocion) {\r\n    const url = new URL(`${BASE_PATH}api/promociones/detalle/${idPromocion}`);\r\n    \r\n    return fetch(url, { \r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.text(); \r\n    })\r\n    .then(responseText => {\r\n        if (responseText) {\r\n            const promo = JSON.parse(responseText);\r\n            return {\r\n                ...promo,\r\n                fechaInicio: new Date(promo.fechaInicio).toISOString().split('T')[0],\r\n                fechaFin: new Date(promo.fechaFin).toISOString().split('T')[0]\r\n            };\r\n        }\r\n        return null; \r\n    })\r\n    .then(data => {\r\n        console.log('Promoción obtenida:', data);\r\n        return data;\r\n    })\r\n    .catch(error => {\r\n        console.error('Error al obtener la promoción:', error);\r\n    });\r\n}\r\nexport function obtenerProductosPromocion(idPromocion) {\r\n    const url = new URL(`${BASE_PATH}api/productoPromocion/${idPromocion}`);\r\n    \r\n    return fetch(url, { \r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.text(); \r\n    })\r\n    .then(responseText => {\r\n        if (responseText) {\r\n            const productos = JSON.parse(responseText);\r\n            return productos.map(productoPromocion => ({\r\n                ...productoPromocion,\r\n                promocion: {\r\n                    ...productoPromocion.promocion,\r\n                    fechaInicio: new Date(productoPromocion.promocion.fechaInicio).toISOString().split('T')[0],\r\n                    fechaFin: new Date(productoPromocion.promocion.fechaFin).toISOString().split('T')[0]\r\n                }\r\n            }));\r\n        }\r\n        return []; \r\n    })\r\n    .then(data => {\r\n        console.log('Productos de la promoción obtenidos:', data);\r\n        return data;\r\n    })\r\n    .catch(error => {\r\n        console.error('Error al obtener los productos de la promoción:', error);\r\n    });\r\n}\r\n\r\nexport function actualizarEstadoPromocion(idPromocion) {\r\n    const url = new URL(`${BASE_PATH}api/promociones/${idPromocion}/actualizarEstado`);\r\n    \r\n    return fetch(url, { \r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.text();\r\n    })\r\n    .then(responseText => {\r\n        if (responseText) {\r\n            console.log('Estado de la promoción actualizado:', responseText);\r\n        }\r\n        return responseText;\r\n    })\r\n    .catch(error => {\r\n        console.error('Error al actualizar el estado de la promoción:', error);\r\n    });\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}