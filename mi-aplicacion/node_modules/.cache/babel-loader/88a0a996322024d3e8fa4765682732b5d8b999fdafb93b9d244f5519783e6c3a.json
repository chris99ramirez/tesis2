{"ast":null,"code":"import { BASE_PATH } from './config';\nexport function listarProductosInventario() {\n  const url = `${BASE_PATH}api/products`;\n  const params = {\n    method: \"GET\"\n  };\n  return fetch(url, params).then(response => {\n    if (!response.ok) {\n      throw new Error('Error en la respuesta del servidor: ' + response.statusText);\n    }\n    return response.json();\n  }).then(data => {\n    return data;\n  }).catch(error => {\n    console.error(\"Error al listar categorías: \", error);\n    return {\n      errMsg: error.message,\n      success: false\n    };\n  });\n}\nexport function updateProduct(productId, productData) {\n  return fetch(`${BASE_PATH}api/products/${productId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(productData)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).then(data => {\n    return data;\n  }).catch(errMsg => {\n    return {\n      errMsg: errMsg.message,\n      success: false\n    };\n  });\n}","map":{"version":3,"names":["BASE_PATH","listarProductosInventario","url","params","method","fetch","then","response","ok","Error","statusText","json","data","catch","error","console","errMsg","message","success","updateProduct","productId","productData","headers","body","JSON","stringify"],"sources":["C:/Users/chris/Documents/Proyecto/mi-aplicacion/src/api/productos.js"],"sourcesContent":["import{BASE_PATH} from './config';\r\n\r\nexport function listarProductosInventario() {\r\n    const url = `${BASE_PATH}api/products`;\r\n    const params = {\r\n        method: \"GET\"\r\n    };\r\n    return fetch(url, params)\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error('Error en la respuesta del servidor: ' + response.statusText);\r\n        }\r\n        return response.json();\r\n    })\r\n    .then(data => {\r\n        return data;\r\n    })\r\n    .catch(error => {\r\n        console.error(\"Error al listar categorías: \", error);\r\n        return {\r\n            errMsg: error.message,\r\n            success: false\r\n        };\r\n    });\r\n    \r\n}\r\n\r\nexport function updateProduct(productId, productData) {\r\n    return fetch(`${BASE_PATH}api/products/${productId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(productData)\r\n    })\r\n    .then(response => {\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n    })\r\n    .then(data => {\r\n        return data;\r\n    })\r\n    .catch(errMsg => {\r\n        return {\r\n            errMsg: errMsg.message,\r\n            success: false\r\n        };\r\n    });\r\n}\r\n\r\n"],"mappings":"AAAA,SAAOA,SAAS,QAAO,UAAU;AAEjC,OAAO,SAASC,yBAAyBA,CAAA,EAAG;EACxC,MAAMC,GAAG,GAAI,GAAEF,SAAU,cAAa;EACtC,MAAMG,MAAM,GAAG;IACXC,MAAM,EAAE;EACZ,CAAC;EACD,OAAOC,KAAK,CAACH,GAAG,EAAEC,MAAM,CAAC,CACxBG,IAAI,CAACC,QAAQ,IAAI;IACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,sCAAsC,GAAGF,QAAQ,CAACG,UAAU,CAAC;IACjF;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;IACV,OAAOA,IAAI;EACf,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO;MACHE,MAAM,EAAEF,KAAK,CAACG,OAAO;MACrBC,OAAO,EAAE;IACb,CAAC;EACL,CAAC,CAAC;AAEN;AAEA,OAAO,SAASC,aAAaA,CAACC,SAAS,EAAEC,WAAW,EAAE;EAClD,OAAOhB,KAAK,CAAE,GAAEL,SAAU,gBAAeoB,SAAU,EAAC,EAAE;IAClDhB,MAAM,EAAE,KAAK;IACbkB,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW;EACpC,CAAC,CAAC,CACDf,IAAI,CAACC,QAAQ,IAAI;IACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAOF,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;IACV,OAAOA,IAAI;EACf,CAAC,CAAC,CACDC,KAAK,CAACG,MAAM,IAAI;IACb,OAAO;MACHA,MAAM,EAAEA,MAAM,CAACC,OAAO;MACtBC,OAAO,EAAE;IACb,CAAC;EACL,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}